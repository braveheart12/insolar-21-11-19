package artifacts

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/insolar/insolar"
)

// PulseDescriptorMock implements PulseDescriptor
type PulseDescriptorMock struct {
	t minimock.Tester

	funcPulse          func() (pp1 *insolar.Pulse)
	inspectFuncPulse   func()
	afterPulseCounter  uint64
	beforePulseCounter uint64
	PulseMock          mPulseDescriptorMockPulse
}

// NewPulseDescriptorMock returns a mock for PulseDescriptor
func NewPulseDescriptorMock(t minimock.Tester) *PulseDescriptorMock {
	m := &PulseDescriptorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PulseMock = mPulseDescriptorMockPulse{mock: m}

	return m
}

type mPulseDescriptorMockPulse struct {
	mock               *PulseDescriptorMock
	defaultExpectation *PulseDescriptorMockPulseExpectation
	expectations       []*PulseDescriptorMockPulseExpectation
}

// PulseDescriptorMockPulseExpectation specifies expectation struct of the PulseDescriptor.Pulse
type PulseDescriptorMockPulseExpectation struct {
	mock *PulseDescriptorMock

	results *PulseDescriptorMockPulseResults
	Counter uint64
}

// PulseDescriptorMockPulseResults contains results of the PulseDescriptor.Pulse
type PulseDescriptorMockPulseResults struct {
	pp1 *insolar.Pulse
}

// Expect sets up expected params for PulseDescriptor.Pulse
func (mmPulse *mPulseDescriptorMockPulse) Expect() *mPulseDescriptorMockPulse {
	if mmPulse.mock.funcPulse != nil {
		mmPulse.mock.t.Fatalf("PulseDescriptorMock.Pulse mock is already set by Set")
	}

	if mmPulse.defaultExpectation == nil {
		mmPulse.defaultExpectation = &PulseDescriptorMockPulseExpectation{}
	}

	return mmPulse
}

// Inspect accepts an inspector function that has same arguments as the PulseDescriptor.Pulse
func (mmPulse *mPulseDescriptorMockPulse) Inspect(f func()) *mPulseDescriptorMockPulse {
	if mmPulse.mock.inspectFuncPulse != nil {
		mmPulse.mock.t.Fatalf("Inspect function is already set for PulseDescriptorMock.Pulse")
	}

	mmPulse.mock.inspectFuncPulse = f

	return mmPulse
}

// Return sets up results that will be returned by PulseDescriptor.Pulse
func (mmPulse *mPulseDescriptorMockPulse) Return(pp1 *insolar.Pulse) *PulseDescriptorMock {
	if mmPulse.mock.funcPulse != nil {
		mmPulse.mock.t.Fatalf("PulseDescriptorMock.Pulse mock is already set by Set")
	}

	if mmPulse.defaultExpectation == nil {
		mmPulse.defaultExpectation = &PulseDescriptorMockPulseExpectation{mock: mmPulse.mock}
	}
	mmPulse.defaultExpectation.results = &PulseDescriptorMockPulseResults{pp1}
	return mmPulse.mock
}

//Set uses given function f to mock the PulseDescriptor.Pulse method
func (mmPulse *mPulseDescriptorMockPulse) Set(f func() (pp1 *insolar.Pulse)) *PulseDescriptorMock {
	if mmPulse.defaultExpectation != nil {
		mmPulse.mock.t.Fatalf("Default expectation is already set for the PulseDescriptor.Pulse method")
	}

	if len(mmPulse.expectations) > 0 {
		mmPulse.mock.t.Fatalf("Some expectations are already set for the PulseDescriptor.Pulse method")
	}

	mmPulse.mock.funcPulse = f
	return mmPulse.mock
}

// Pulse implements PulseDescriptor
func (mmPulse *PulseDescriptorMock) Pulse() (pp1 *insolar.Pulse) {
	mm_atomic.AddUint64(&mmPulse.beforePulseCounter, 1)
	defer mm_atomic.AddUint64(&mmPulse.afterPulseCounter, 1)

	if mmPulse.inspectFuncPulse != nil {
		mmPulse.inspectFuncPulse()
	}

	if mmPulse.PulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPulse.PulseMock.defaultExpectation.Counter, 1)

		mm_results := mmPulse.PulseMock.defaultExpectation.results
		if mm_results == nil {
			mmPulse.t.Fatal("No results are set for the PulseDescriptorMock.Pulse")
		}
		return (*mm_results).pp1
	}
	if mmPulse.funcPulse != nil {
		return mmPulse.funcPulse()
	}
	mmPulse.t.Fatalf("Unexpected call to PulseDescriptorMock.Pulse.")
	return
}

// PulseAfterCounter returns a count of finished PulseDescriptorMock.Pulse invocations
func (mmPulse *PulseDescriptorMock) PulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPulse.afterPulseCounter)
}

// PulseBeforeCounter returns a count of PulseDescriptorMock.Pulse invocations
func (mmPulse *PulseDescriptorMock) PulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPulse.beforePulseCounter)
}

// MinimockPulseDone returns true if the count of the Pulse invocations corresponds
// the number of defined expectations
func (m *PulseDescriptorMock) MinimockPulseDone() bool {
	for _, e := range m.PulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPulse != nil && mm_atomic.LoadUint64(&m.afterPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockPulseInspect logs each unmet expectation
func (m *PulseDescriptorMock) MinimockPulseInspect() {
	for _, e := range m.PulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PulseDescriptorMock.Pulse")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPulseCounter) < 1 {
		m.t.Error("Expected call to PulseDescriptorMock.Pulse")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPulse != nil && mm_atomic.LoadUint64(&m.afterPulseCounter) < 1 {
		m.t.Error("Expected call to PulseDescriptorMock.Pulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PulseDescriptorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PulseDescriptorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PulseDescriptorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPulseDone()
}
